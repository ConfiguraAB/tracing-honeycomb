initSidebarItems({"enum":[["ErrorKind","Type of error, exposed through `Error` member `kind`"],["Value","Represents any valid JSON value."]],"fn":[["init","init is called on app initialisation and passed a `Config`. A `Config` has two sets of options (`client::Options` and `transmission::Options`)."]],"macro":[["json","Construct a `serde_json::Value` from a JSON literal."]],"mod":[["client","Client is the interface to create new builders, events and send the latter somewhere using `Transmission`."],["mock","Mock module to ease testing"],["test","Auxiliary test module"],["transmission","Transmission handles the transmission of events to Honeycomb"]],"struct":[["Builder","Builder is used to create templates for new events, specifying default fields and override settings."],["Config","Config allows the user to customise the initialisation of the library (effectively the Client)"],["Error","Error"],["Event","`Event` is used to hold data that can be sent to Honeycomb. It can also specify overrides of the config settings (`client::Options`)."]],"trait":[["FieldHolder","`FieldHolder` implements common functions that operate on the `fields` component of a struct (usually Event or Builder). This avoids some duplication of code."],["Sender","`Sender` is responsible for handling events after Send() is called.  Implementations of `send()` must be safe for concurrent calls."]],"type":[["DynamicFieldFunc","Shorthand type for the function to be passed to the `add_dynamic_field` calls"],["Metadata","`Metadata` is a type alias for an optional json serialisable value"],["Result","Result shorthand for a `std::result::Result` wrapping our own `Error`"]]});