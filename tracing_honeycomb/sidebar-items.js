initSidebarItems({"fn":[["current_dist_trace_ctx","Retrieve the distributed trace context associated with the current span. Returns the `TraceId`, if any, that the current span is associated with along with the `SpanId` belonging to the current span. Specialized to the honeycomb.io-specific SpanId and TraceId provided by this crate."],["new_blackhole_telemetry_layer","Construct a TelemetryLayer that does not publish telemetry to any backend. Specialized to the honeycomb.io-specific SpanId and TraceId provided by this crate."],["new_honeycomb_telemetry_layer","Construct a TelemetryLayer that publishes telemetry to honeycomb.io using the provided honeycomb config. Specialized to the honeycomb.io-specific SpanId and TraceId provided by this crate."],["register_dist_tracing_root","Register the current span as the local root of a distributed trace. Specialized to the honeycomb.io-specific SpanId and TraceId provided by this crate."]],"struct":[["HoneycombTelemetry","Telemetry capability that publishes events and spans to Honeycomb.io."],["SpanId","Unique Span identifier. Combines a span's `tracing::Id` with an instance identifier to avoid id collisions in distributed scenarios. `Display` and `FromStr` are guaranteed to round-trip."],["TraceId","A Honeycomb Trace ID. Uniquely identifies a single distributed trace. `Display` and `FromStr` are guaranteed to round-trip."]]});